<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>YueRuo's Blog</title><link href="http://yueruo.github.io/" rel="alternate"></link><link href="http://yueruo.github.io/feeds/all.atom.xml" rel="self"></link><id>http://yueruo.github.io/</id><updated>2014-06-05T21:20:00+02:00</updated><entry><title>Swift学习笔记(基本语法)</title><link href="http://yueruo.github.io/iOS-SwiftSingleton.html" rel="alternate"></link><updated>2014-06-05T21:20:00+02:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2014-06-05:iOS-SwiftSingleton.html</id><summary type="html">&lt;h4&gt;Swift实现单例模式&lt;/h4&gt;
&lt;p&gt;单例模式在各个语言中都有实现，swift语言推出已经几天了，通过这几天的看文档，特奉上写的Swift的单例实现，供大家学习交流，欢迎指正。  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;---若转载请注明出处- YueRuo's Blog - &lt;a href="http://yueruo.github.io"&gt;http://yueruo.github.io&lt;/a&gt; ---&lt;br&gt;&lt;/p&gt;
&lt;p&gt;由于Swift语言弱化了struct和class之间的界限，这里我分别给出自己写的两种的单例实现  &lt;/p&gt;
&lt;h6&gt;class版本：&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;SwiftSingleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;shareInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;SwiftSingleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;dispatch_once_t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SwiftSingleton&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;dispatch_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
                &lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SwiftSingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于单例类，需要一个唯一的对外输出实例的shareInstance方法，而通过官方文档的查阅，发现对于class来说，静态方法可以用&lt;code&gt;class func&lt;/code&gt; 来标示，静态变量使用&lt;code&gt;class var&lt;/code&gt;来处理，但这里我借助了内部struct的静态变量来对唯一的instance进行存储。
调用时，可以使用  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;swiftInstance1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SwiftSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shareInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;swiftInstance2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SwiftSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shareInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;swiftInstance1&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="n"&gt;swiftInstance2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//“===”判别是否是同一个实例对象&lt;/span&gt;
    &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;they are the same instance!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，上面使用到了dispatch_once，有过GCD编程经验的应该会非常熟悉，可以保证线程安全，以及只会被调用一次。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h6&gt;struct版本&lt;/h6&gt;
&lt;p&gt;struct版本与class版本几乎一致，唯一区别在于对于func使用的关键字由&lt;code&gt;class func&lt;/code&gt;变为 &lt;code&gt;static func&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;StructSingleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;shareInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;StructSingleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;dispatch_once_t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;StructSingleton&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;dispatch_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
                &lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;StructSingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;YRSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="iOS"></category><category term="Swift"></category></entry><entry><title>YRUISignal简介</title><link href="http://yueruo.github.io/iOS-YRUISignal.html" rel="alternate"></link><updated>2014-05-19T20:20:00+02:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2014-05-19:iOS-YRUISignal.html</id><summary type="html">&lt;h3&gt;YRUISignal&lt;/h3&gt;
&lt;p&gt;==========&lt;/p&gt;
&lt;p&gt;&lt;br&gt;---若转载请注明出处- YueRuo's Blog - &lt;a href="http://yueruo.github.io"&gt;http://yueruo.github.io&lt;/a&gt; ---&lt;br&gt;  &lt;/p&gt;
&lt;p&gt;开发中经常遇到类似的情况，viewController上贴了view1，view1上贴了view2，view2上贴了view3...&lt;br /&gt;
（如下图）&lt;/p&gt;
&lt;p&gt;viewController&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-----view1&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;------view2&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;------view3  &lt;/p&gt;
&lt;p&gt;如果在view3上触发了一个事件，需要在view1，或者viewController中处理，按照一般的处理方式，你需要：&lt;br /&gt;
1.在view3上做protocol，或者做block回调&lt;br /&gt;
2.把事件传给上一个界面（对view3来说就是给到view2）&lt;br /&gt;
3.view2再重复1-2的工作，直到到达相应的界面为止。  &lt;/p&gt;
&lt;p&gt;如果这个view的层次很深。。。。你恐怕就不愿意这么做了。。。&lt;/p&gt;
&lt;p&gt;还好我们还有替代方案：用通知处理，view3上发送通知，在viewController中先注册通知，再处理它。恩恩，比上面那种要简单多了，但是我们继续思考，是否一个小小的UI事件都需要使用全局的通知呢？  &lt;/p&gt;
&lt;p&gt;这里我受Touch事件的链式响应处理以及早期BeeFramework中Signal的启发，做了这个小工具类&lt;a href="https://github.com/YueRuo/YRUISignal"&gt;YRUISignal&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这个工具类的使用很简单。比如说上面提到的view3中触发事件，viewController中处理，只需要两步：&lt;br /&gt;
1.在view3中触发事件时：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;sendYRUISignalForKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;事件唯一名称&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.在viewController中实现handleYRUISignal方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;handleYRUISignal:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YRUISignal&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;isEqualToString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;事件唯一名称&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//能处理这个信号&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//根据需要中断响应链&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//不能处理（继续传递给下一个view）&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打完收工，是不是非常的简单？  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
需要注意的是：&lt;br /&gt;
1.这种方式由于采用的是父view链式查找，因此只有view被add到界面上才有效，换句话说，如果这个view被removeFromSubview，则不能正确的传递信号出去。（不过你可以使用sendYRUISignal方法显式指明接受者，但是这样又有点多此一举了）&lt;br /&gt;
2.由于使用的是父view查找链，直至ViewController，因此如果两个view不在同一个controller上，也不能把事件传递过去。
3.这种方式个人觉得比通知简单一些，当然仁者见仁智者见智，目前Bee也是使用通知注册的方法去做的传递，但是接收处理上我们不太一致。&lt;br /&gt;
&lt;br&gt;        &lt;/p&gt;
&lt;p&gt;希望这里处理方式和思想能对大家有所帮助或者启发。&lt;/p&gt;</summary><category term="iOS"></category></entry><entry><title>浅析HHRouter</title><link href="http://yueruo.github.io/iOS-HHRouter.html" rel="alternate"></link><updated>2014-03-27T22:20:00+01:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2014-03-27:iOS-HHRouter.html</id><summary type="html">&lt;h4&gt;浅析HHRouter&lt;/h4&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近逛论坛，看到一个很小巧的基于url router的iOS小工具&lt;a href="https://github.com/Huohua/HHRouter"&gt;HHRouter&lt;/a&gt;。
同时附上论坛原帖地址&lt;a href="http://www.cocoachina.com/bbs/read.php?tid=195480"&gt;http://www.cocoachina.com/bbs/read.php?tid=195480&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;---若转载请注明出处- YueRuo's Blog - &lt;a href="http://yueruo.github.io"&gt;http://yueruo.github.io&lt;/a&gt; ---&lt;br&gt;  &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前两年研究Three20时就看到过他们这种的应用，但是Three20太过于庞大和重量级，今天看到这个HHRouter却比较小巧。有些想说的东西论坛原帖分析的也很到位了，我就不再重述。&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这种思想还是比较有借鉴性的，高度解耦，同时也很容易追踪跳转路径和历史记录。&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;但同时也存在一定的局限性，比如涉及到复杂对象传参，基本上还是需要以前的处理方式去做。当然，这种东西个人感觉还是值得一试的。&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其他的就不多说什么了，有兴趣的可以自己去看看其内部实现。&lt;/p&gt;</summary><category term="iOS"></category></entry><entry><title>YRBorderView简介</title><link href="http://yueruo.github.io/iOS-YRBorderView.html" rel="alternate"></link><updated>2014-03-26T20:20:00+01:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2014-03-26:iOS-YRBorderView.html</id><summary type="html">&lt;h4&gt;YRBorderView简介&lt;/h4&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;开发中经常遇到给某个view增加边线和角度，总觉得使用Layer的Border功能不够，比如只给某个边加一条边线等等。最近闲来无事，便做了这个小View。用于各种边线和圆角效果的处理:&lt;a href="https://github.com/YueRuo/YRBorderView"&gt;YRBorderView&lt;/a&gt;。&lt;br /&gt;
&lt;br&gt;---若转载请注明出处- YueRuo's Blog - &lt;a href="http://yueruo.github.io"&gt;http://yueruo.github.io&lt;/a&gt; ---&lt;br&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;基于CoreGraphics进行的绘制，相比系统自身的Layer功能更加强大和灵活，layer的border只能是相同颜色相同粗细相同弧度。而YRBorderView边线支持4个方向的边线定制粗细、颜色、是否显示。同时4个角分别支持不同弧度设置。&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;另外，支持view裁切掉边线外面的部分（图中view的背景灰色被裁掉了）。 &lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;详细的效果可以看下图的5个view。其中的灰色是view的背景色，紫色是边线内填充色。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img alt="alt YRBorderViewDemo效果图" src="image/YRBorderViewDemo效果图.png" title="YRBorderViewDemo效果图" /&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其他的就不多说什么了，有兴趣的可以自己去看看其内部实现。或者可以自己去扩展做一个view的category玩一玩。&lt;/p&gt;</summary><category term="iOS"></category></entry><entry><title>支付宝电话面试</title><link href="http://yueruo.github.io/iOS-NSNotification.html" rel="alternate"></link><updated>2014-02-28T20:20:00+01:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2014-02-28:iOS-NSNotification.html</id><summary type="html">&lt;h3&gt;支付宝电话面试总结&lt;/h3&gt;
&lt;p&gt;2月中的时候，去某招聘网站开放了简历，被一个猎头推了一下阿里的iOS开发职位。&lt;br /&gt;
最近项目特紧，昨夜加班到很晚，回去又改一个小控件到夜里，今天中午做了个PPT没有午休，想不到今天会在这种状态下接到了电话面试。面试我的人还是很友好的。&lt;br /&gt;
总结回忆一下电话面试时犯下的错误吧。&lt;br /&gt;
&lt;br&gt;---若转载请注明出处- YueRuo's Blog - &lt;a href="http://yueruo.github.io"&gt;http://yueruo.github.io&lt;/a&gt; ---&lt;br&gt;&lt;/p&gt;
&lt;p&gt;1.首先是简单的自我介绍，最近一直面试别人的我，在突然接到电话的前几分钟里居然有点晕晕乎乎，迷迷糊糊的把项目情况大概讲了一下，都忘记了稍微点出一些项目使用的技术留给对面发挥。&lt;br /&gt;
2.由于有过一个很早的即时通信的项目，面试官问了一下聊天界面的简单实现，我把当初刚入行时的UILabel+UIImageView的初级做法说完了，居然忘记把现在使用的CoreText技术话题引出来。我提到了表情处理，使用的是我们自己定义的表情标签。&lt;br /&gt;
3.面试官问到个人所掌握的语言，除了OC以外，我回答Java稍微熟悉一点、html、python等有简单了解。面试官思考了一下，觉得还是面试我OC相关的内容，问起我OC和其他语言的优缺点比较(这种经常会碰到的题目本来是很简单的，当时晕晕乎乎的我却答的乱七八糟)，我答了面向对象，提到运行时是对方很感兴趣，追问了运行时能做一些什么，我答了动态创建类，以及方法的拦截处理。对方又追问了OC是如何实现runtime的，我完全忘记了平时看的资料。&lt;br /&gt;
4.换了个话题，聊起多线程，很自然的NSThread，NSOperationQueue和GCD我都提了一下，然后是项目中多线程的应用，我提到了大量离线数据解析卡主线程，最后使用GCD解决，面试官追问GCD的底层实现是什么，对这个问题当时的我完全没反应过来是要聊什么，现在回想起来也许面试官是想引出Block话题。&lt;br /&gt;
5.最后聊到内存管理，我提到iOS中没有垃圾回收，OC的内存管理是依赖于引用技术，然后把ARC技术简单讲了一下，面试官紧跟着追问ARC的底层细节。我回答编译器添加retain、release、copy等代码，面试官接着追问具体在哪里怎么添加的，我此时已近有点混乱了，于是把Set方法的ARC编译器实现讲了一下。这时面试官可能没有听到想要的答案，于是直接追问strong和weak关键字的作用，我回答的是提到了防止循环引用，面试官追问具体是如何防止循环引用的，我回答的时候已近完全错乱了，胡乱的说了一下。&lt;br /&gt;
6.面试官最后觉得答的不是很好，于是便说“看来你没有研究过这些东西的底层实现“，虽然平时我也有看一些偏底层的资料，但是确实没有用心去记，最后我提了引用计数是系统的一块栈记录着各个对象的引用计数，并且是同步的。
面试官最后礼貌的结束了电话面试，电话的结尾我对自己今天的很差的状态表示了歉意，对方还安慰了我一下，并提到会有评估，如果有结果后续。&lt;/p&gt;
&lt;p&gt;今天整体的电话面试很让自己不满，全程都非常的被动，没有把面试引导到自己擅长的地方。
同时也发现阿里的面试更加贴近底层，任何一种技术，不光要学会如何去使用，更多的是要去研究它的底层实现，我平时只是一带而过简单的看，所以在这次面试中感到了很大压力。  &lt;/p&gt;
&lt;p&gt;最后，总结一下：毫无准备的面试是危险的，状态不佳的时候应当约一个时间，面试过程中的问题有一些是可以引导到自己擅长的区域的，才能展现自己所拥有的技术，但是最重要的是，要有真材实料实实在在的水平。&lt;br /&gt;
人与公司也是讲究缘分的，恰巧在你需要一份工作的时候有一家公司在招人，而你们恰巧又相互符合对彼此的需要。总之，不论在任何公司，都是缘分，都应当全心全意，努力上进。&lt;br /&gt;
希望后续的自己能更好的学习，踏踏实实的潜心研究下去。&lt;/p&gt;</summary><category term="iOS面试"></category></entry><entry><title>iOS中屏蔽父类方法</title><link href="http://yueruo.github.io/iOS-SuperMethodHide.html" rel="alternate"></link><updated>2013-12-22T13:20:00+01:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2013-12-22:iOS-SuperMethodHide.html</id><summary type="html">&lt;h4&gt;iOS中屏蔽父类方法&lt;/h4&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iOS开发中，有时你可能希望屏蔽一些父类的方法，比如说对于单例类，你不希望别人再通过  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;的方式再次创建一个对象。类似JAVA语言中，可以通过覆盖父类的方法，改为private即可使外部无法访问到此方法，那么iOS中如何操作呢？&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先对于Objective-C来说，父类的方法永远是对外可见的。换句话说，不可能达到类似JAVA那种的完全的屏蔽一个方法。但是，我们可以通过如下办法来变相达到：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对于任意的对象，其自身都有一个doesNotRecognizeSelector方法，当调用时会抛出异常(可以变相的让类不响应此消息)。
所以，我们可以在类似init这种地方，使用：   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;doesNotRecognizeSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从而在运行时调用此方法时，由于不响应此消息而报错。&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;你也可以使用断言，或自己的打印来给予其他开发者更多的提示，比如下面这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSAssert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;this method not available !&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;---若转载请注明出处- YueRuo's Blog - &lt;a href="http://yueruo.github.io"&gt;http://yueruo.github.io&lt;/a&gt; ---&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最后，给出一个完整的&lt;code&gt;单例&lt;/code&gt;的小demo，并且禁用外部调用init方法来对类进行实例化，假设类名位YRDemoClass。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;YRDemoClass&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;YRDemoClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YRDemoClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;shareDemoClass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;dispatch_once_t&lt;/span&gt; &lt;span class="n"&gt;onceToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;onceToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;YRDemoClass&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;initBySuper&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//禁用外部可见的init方法&lt;/span&gt;
    &lt;span class="n"&gt;NSAssert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;this class is Singleton !&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;initBySuper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//外部不可见的方法&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//your custom init&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//其他的方法等等&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="iOS"></category></entry><entry><title>iOS的通用的类序列化</title><link href="http://yueruo.github.io/YRSerializationCategory.html" rel="alternate"></link><updated>2013-12-10T11:20:00+01:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2013-12-10:YRSerializationCategory.html</id><summary type="html">&lt;h4&gt;iOS的通用的类序列化&lt;/h4&gt;
&lt;p&gt;对于任何一门语言来说，序列化和反序列化操作都是很重要的部分。在iOS开发当中，经常可能会遇到把某个类处理成可存储的数据，以便之后使用（或者再恢复成之前的对象）。&lt;br /&gt;
&lt;br&gt;---若转载请注明出处- YueRuo's Blog - &lt;a href="http://yueruo.github.io"&gt;http://yueruo.github.io&lt;/a&gt; ---&lt;br&gt; &lt;br /&gt;
这里我直接进入正题，给出三种解决方案：    &lt;/p&gt;
&lt;h6&gt;第一种：使用iOS框架中的NSKeyedArchiver&lt;/h6&gt;
&lt;p&gt;使用这个的教程网上太多了，概括起来就是对需要序列化和反序列化的类实现NSCoding协议的两个方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;encodeWithCoder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSCoder&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;aCoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;initWithCoder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSCoder&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;aDecoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后通过NSKeyedArchiver进行相应的操作即可。优势是比较简单易处理，能满足保存一个对象并恢复的需求，可以指定保存的类型为xml等等。&lt;/p&gt;
&lt;h6&gt;第二种：对需要自定义序列化的类进行特殊处理&lt;/h6&gt;
&lt;p&gt;比如我希望A类能序列化成JSON数据，然后再通过JSONString反序列化回来，这时候上面的那种方式已经满足不了需求了，可以相应的在A类里面添加如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;toJSONString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;fromJSONString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后自己去针对性的实现，这种方式总体上是比上面那种要更加灵活，输出格式也可以自己任意定制，简而言之就是根据自己的类针对性的写相应的序列化和反序列化方法。  &lt;br /&gt;
&lt;br&gt;&lt;br&gt;
上面这两种方式都能实现序列化和反序列化，优势是对不同的类很有针对性，缺点也比较明显，每次你需要对一个新的类做序列化和反序列化时，都要自己去手动实现相应的方法才能使用。如果有100个类需要序列化，难道我们要100个类都挨个写一遍么？&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h6&gt;第三种：使用通用的序列化和反序列化方法。&lt;/h6&gt;
&lt;p&gt;所谓通用方法，即一套可以对任意类进行处理的方法。这里我先给出思路，同样是针对性的对类的所有Property进行遍历处理，存储输出为你想要的通用格式。&lt;br /&gt;
可供使用的技术包括Category、KVC、runtime等等。&lt;br /&gt;
&lt;br&gt;
我开源了自己的通用的序列化和反序列化的Category，供大家研究和学习。 &lt;br /&gt;
&lt;code&gt;能把一个对象转换为NSDictionary，此Dictionary可以被顺利的JSON或其他存储，如NSUserDefaults等。并能转换回对象&lt;/code&gt; &lt;br /&gt;
&lt;a href="https://github.com/YueRuo/NSObject-YRSerialization"&gt;https://github.com/YueRuo/NSObject-YRSerialization&lt;/a&gt; &lt;br /&gt;
更具体的使用方法见项目Demo。&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂的对象模型，不管是继承、嵌套，都可以顺利的遍历完。  &lt;/li&gt;
&lt;li&gt;实现了NSCoding协议&lt;/li&gt;
&lt;li&gt;支持泛型类属性，比如id类型的property。&lt;/li&gt;
&lt;li&gt;检查是否存在自定义的C结构体，确保安全通过存储  &lt;/li&gt;
&lt;li&gt;可以自定义存储的键值，通常对传参或服务器返回数据解析回对象很有帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不支持：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链式存储的对象。如A类中有一个Property也是A类。&lt;/li&gt;
&lt;li&gt;不支持自定义的C结构体。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="iOS"></category></entry><entry><title>搭建Blog完成</title><link href="http://yueruo.github.io/firstblog.html" rel="alternate"></link><updated>2013-12-05T20:20:00+01:00</updated><author><name>YueRuo</name></author><id>tag:yueruo.github.io,2013-12-02:firstblog.html</id><summary type="html">&lt;h4&gt;搭建Blog完成&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;终于把这个弄好了，不容易啊，以前一直在CSDN上写Blog，但是很难用，后来决定迁移到Github上来，使用Markdown语法来写，于是开始了我的折腾。&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;先是&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;的安装，然后是Markdown语法的简单学习，接着安装&lt;a href="https://github.com/waylan/Python-Markdown"&gt;Python-Markdown&lt;/a&gt;。最后Github Pages,虽然现在可能还有些东西没完成，但是对于我来说，Blog的基本功能是足够了。  &lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;期间遇到了一个Disqus评论不能正常加载的问题，最后通过检查，发现时因为配置文件中的&lt;code&gt;SITEURL&lt;/code&gt;没有设置造成的，添加上后就可以了。&lt;/p&gt;</summary></entry></feed>